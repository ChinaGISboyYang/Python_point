# -*- coding: utf-8 -*-
"""
Created on Wed Mar 28 09:30:43 2018

@author: hasee_yang
"""
'''
                PYTHON KNOWLEDGE POINTS
                
python基础
    1.可变与不可变类型； 
    2.浅拷贝与深拷贝的实现方式、区别；deepcopy如果你来设计，如何实现； 
    3.__new__() 与 __init__()的区别； 
    4.你知道几种设计模式； 
    5.编码和解码你了解过么； 
    6.列表推导list comprehension和生成器的优劣； 
    7.什么是装饰器；如果想在函数之后进行装饰，应该怎么做； 
    8.手写个使用装饰器实现的单例模式； 
    9.使用装饰器的单例和使用其他方法的单例，在后续使用中，有何区别； 
    10.手写：正则邮箱地址； 
    11.介绍下垃圾回收：引用计数/分代回收/孤立引用环； 
    12.多进程与多线程的区别；CPU密集型适合用什么； 
    13.进程通信的方式有几种； 
    14.介绍下协程，为何比线程还快； 
    15.range和xrange的区别（他妹的我学的py3…）； 
    
'''
# python可变与不可变类型：
# Python的每个对象都分为可变和不可变，
# 主要的核心类型中，数字、字符串、元组是不可变的，列表、字典是可变的。
i = 1
i += 1
i
id(i)
# out: 2;1737387520
i += 1
i
id(i)
# out: 3;1737387520,内存你地址相同
'''
可变类型的话，以list为例。list在append之后，
还是指向同个内存地址，因为list是可变类型，可以在原处修改。
'''
a = [1,2,3]
id(a)
# out:1341680945224
a.append(4)
id(a)
# out: 1341680945224,有相同的内存地址，因为list是可变类型，对其本身可在原处修改

b = [1,2,3]
id(b)
# out: 1341680970888,内存地址就不同了

'''
浅拷贝和深拷贝：
    python中的深拷贝和浅拷贝和java里面的概念是一样的，
    所谓浅拷贝就是对引用的拷贝，
    所谓深拷贝就是对对象的资源的拷贝。
    浅拷贝是在另一块地址中创建一个新的变量或容器，
        但是容器内的元素的地址均是源对象的元素的地址的拷贝。
        也就是说新的容器中指向了旧的元素（ 新瓶装旧酒 ）。
    深拷贝是在另一块地址中创建一个新的变量或容器，同时容器内的元素的地址也是新开辟的，
        仅仅是值相同而已，是完全的副本。也就是说（ 新瓶装新酒 ）。
'''
c = ['hello', [1,2,3]]
d = c[:]
[id(x) for x in c]
# out: [1341661847480, 1341681005512]是数组C内元素的内存地址
[id(x) for x in d]
# out: [1341661847480, 1341681005512]和上例输出一样
c[1].append(4)
print(c)
# out: ['hello', [1, 2, 3, 4]]
print(d)
# out: ['hello', [1, 2, 3, 4]]




